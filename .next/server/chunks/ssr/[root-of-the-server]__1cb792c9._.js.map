{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/analyze-symptoms.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview An AI agent that analyzes symptoms and health data to identify potential diseases.\n *\n * - analyzeSymptoms - A function that handles the symptom analysis process.\n * - AnalyzeSymptomsInput - The input type for the analyzeSymptoms function.\n * - AnalyzeSymptomsOutput - The return type for the analyzeSymptoms function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AnalyzeSymptomsInputSchema = z.object({\n  symptoms: z\n    .string()\n    .describe('A description of symptoms and health data provided by the user.'),\n});\nexport type AnalyzeSymptomsInput = z.infer<typeof AnalyzeSymptomsInputSchema>;\n\nconst AnalyzeSymptomsOutputSchema = z.object({\n  potentialDiseases: z\n    .string()\n    .describe('A list of potential diseases based on the symptoms provided.'),\n  preventionMethods: z\n    .string()\n    .describe('Methods to prevent the potential diseases.'),\n  treatmentSuggestions: z\n    .string()\n    .describe('Suggestions for treating the potential diseases.'),\n  suggestedMedicines: z\n    .string()\n    .describe('A list of suggested medicines for the potential diseases. This should be a general guide and not a prescription.'),\n});\nexport type AnalyzeSymptomsOutput = z.infer<typeof AnalyzeSymptomsOutputSchema>;\n\nexport async function analyzeSymptoms(input: AnalyzeSymptomsInput): Promise<AnalyzeSymptomsOutput> {\n  return analyzeSymptomsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'analyzeSymptomsPrompt',\n  input: {schema: AnalyzeSymptomsInputSchema},\n  output: {schema: AnalyzeSymptomsOutputSchema},\n  prompt: `You are a medical expert specializing in disease diagnosis and prevention.\n\nYou will analyze the symptoms and health data provided by the user and identify potential diseases.\nYou will also provide methods to prevent these diseases, suggest possible treatment options, and list potential medicines.\nThe suggested medicines should be for informational purposes only and not a direct prescription.\n\nSymptoms and Health Data: {{{symptoms}}}`,\n});\n\nconst analyzeSymptomsFlow = ai.defineFlow(\n  {\n    name: 'analyzeSymptomsFlow',\n    inputSchema: AnalyzeSymptomsInputSchema,\n    outputSchema: AnalyzeSymptomsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,UAAU,uIAAA,CAAA,IAAC,CACR,MAAM,GACN,QAAQ,CAAC;AACd;AAGA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,mBAAmB,uIAAA,CAAA,IAAC,CACjB,MAAM,GACN,QAAQ,CAAC;IACZ,mBAAmB,uIAAA,CAAA,IAAC,CACjB,MAAM,GACN,QAAQ,CAAC;IACZ,sBAAsB,uIAAA,CAAA,IAAC,CACpB,MAAM,GACN,QAAQ,CAAC;IACZ,oBAAoB,uIAAA,CAAA,IAAC,CAClB,MAAM,GACN,QAAQ,CAAC;AACd;AAGO,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0B;IAC1C,QAAQ;QAAC,QAAQ;IAA2B;IAC5C,QAAQ,CAAC;;;;;;wCAM6B,CAAC;AACzC;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA1BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { analyzeSymptoms, type AnalyzeSymptomsOutput } from \"@/ai/flows/analyze-symptoms\";\nimport { z } from \"zod\";\n\nconst symptomsSchema = z.string().min(10, {message: 'Please provide more details about your symptoms.'});\n\nclass AiError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AiError';\n  }\n}\n\nexport async function handleSymptomAnalysis(symptoms: string): Promise<{ data: AnalyzeSymptomsOutput | null; error: string | null }> {\n  const validated = symptomsSchema.safeParse(symptoms);\n\n  if (!validated.success) {\n      return { data: null, error: validated.error.errors[0].message };\n  }\n\n  try {\n    const result = await analyzeSymptoms({ symptoms: validated.data });\n    if (!result.potentialDiseases && !result.preventionMethods && !result.treatmentSuggestions && !result.suggestedMedicines) {\n      throw new AiError('The AI returned an empty response. Please try rephrasing your symptoms.');\n    }\n    return { data: result, error: null };\n  } catch (error) {\n    console.error(\"Error in AI analysis:\", error);\n    if (error instanceof AiError) {\n        return { data: null, error: error.message };\n    }\n    return { data: null, error: \"An unexpected error occurred. Please try again later.\" };\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;;AAEA,MAAM,iBAAiB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI;IAAC,SAAS;AAAkD;AAEtG,MAAM,gBAAgB;IACpB,YAAY,OAAe,CAAE;QAC3B,KAAK,CAAC;QACN,IAAI,CAAC,IAAI,GAAG;IACd;AACF;AAEO,eAAe,sBAAsB,QAAgB;IAC1D,MAAM,YAAY,eAAe,SAAS,CAAC;IAE3C,IAAI,CAAC,UAAU,OAAO,EAAE;QACpB,OAAO;YAAE,MAAM;YAAM,OAAO,UAAU,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO;QAAC;IAClE;IAEA,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,yIAAA,CAAA,kBAAe,AAAD,EAAE;YAAE,UAAU,UAAU,IAAI;QAAC;QAChE,IAAI,CAAC,OAAO,iBAAiB,IAAI,CAAC,OAAO,iBAAiB,IAAI,CAAC,OAAO,oBAAoB,IAAI,CAAC,OAAO,kBAAkB,EAAE;YACxH,MAAM,IAAI,QAAQ;QACpB;QACA,OAAO;YAAE,MAAM;YAAQ,OAAO;QAAK;IACrC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,IAAI,iBAAiB,SAAS;YAC1B,OAAO;gBAAE,MAAM;gBAAM,OAAO,MAAM,OAAO;YAAC;QAC9C;QACA,OAAO;YAAE,MAAM;YAAM,OAAO;QAAwD;IACtF;AACF;;;IApBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 359, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {handleSymptomAnalysis as '40edeeec8a0f1387b86a4e8a7128d0724e0e5a7e74'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 411, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 425, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 439, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}